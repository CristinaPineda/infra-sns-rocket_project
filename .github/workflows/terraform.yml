name: "Terraform Workflow"

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
      project_name: # Mantido, mas note a discussão abaixo sobre service-name vs. project_name para o backend key
        type: string
        required: true
      aws-assume-role-arn:
        type: string
        required: true
      aws-region:
        type: string
        required: true
      aws-statefile-s3-bucket:
        type: string
        required: true
      aws-lock-dynamodb-table:
        type: string
        required: true
      destroy: # Adicionado 'destroy' input do workflow original
        type: boolean
        required: false
        default: false
        description: "Define se o comando 'terraform destroy' deve ser executado (true para destruir, false para plan/apply)"

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    permissions: # Adicionado permissões para OIDC
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.aws-assume-role-arn }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ inputs.aws-region }}

      # O passo de "Read destroy configuration" foi removido.
      # O input 'destroy' já é passado diretamente.
      # Se você precisa que isso seja lido de um arquivo, ajuste o input 'destroy' no workflow chamador.

      - name: Terraform Init
        run: |
          cd infra && \
          terraform init \
            -backend-config="bucket=${{ inputs.aws-statefile-s3-bucket }}" \
            -backend-config="key=${{ inputs.project_name }}/${{ inputs.environment }}/terraform.tfstate" \
            -backend-config="region=${{ inputs.aws-region }}" \
            -backend-config="dynamodb_table=${{ inputs.aws-lock-dynamodb-table }}"

      - name: Terraform Validate
        run: cd infra && terraform validate # Adicionado 'cd infra'

      - name: Terraform Destroy
        if: inputs.destroy == true # Usando o input direto
        id: terraform-destroy
        run: |
          cd infra && \
          terraform workspace select -or-create ${{ inputs.environment }} && \ # Ajustado para -or-create
          terraform destroy \
            -var="environment=${{ inputs.environment }}" \
            -var-file="envs/${{ inputs.environment }}/terraform.tfvars" \ # Caminho relativo a 'infra'
            -auto-approve \
            -lock=false

      # Os passos "Debug - Listar arquivos na pasta infra", "Importar CloudWatch Log Group" e "Importar IAM Role" foram removidos.
      # Eles não devem fazer parte de um pipeline de CI/CD automatizado.

      - name: Terraform Plan
        if: inputs.destroy == false # Usando o input direto
        id: terraform-plan
        run: |
          cd infra && \
          terraform workspace select -or-create ${{ inputs.environment }} && \ # Ajustado para -or-create
          terraform plan \
            -var="environment=${{ inputs.environment }}" \
            -var-file="envs/${{ inputs.environment }}/terraform.tfvars" \ # Caminho relativo a 'infra'
            -out="${{ inputs.environment }}.plan" \
            -lock=false

      - name: Terraform Apply
        if: inputs.destroy == false # Usando o input direto
        id: terraform-apply
        run: |
          cd infra && \
          terraform workspace select -or-create ${{ inputs.environment }} && \ # Ajustado para -or-create
          terraform apply \
            -lock=false \
            "${{ inputs.environment }}.plan"